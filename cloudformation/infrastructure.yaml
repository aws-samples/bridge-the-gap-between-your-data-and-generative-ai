AWSTemplateFormatVersion: 2010-09-09
Description: Basic VPC Infrastructure
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: 'VPCConfig'
        Parameters:
        - Vpccidr
        - PublicSubnetAcidr
        - PublicSubnetBcidr
        - PrivateSubnetAcidr
        - PrivateSubnetBcidr
      - Label:
          default: 'EnvironmentConfig'
        Parameters:
        - EnvironmentName
Mappings:
  # Cloudfront Mappings
  ELBRegionMap:
    'us-east-1':
      ELBAccountId: '127311923021'
    'us-west-2':
      ELBAccountId: '797873946194'
      
Parameters:
  Vpccidr:
    Description: Please enter the IP range (CIDR notation) for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnetAcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnetBcidr:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24
  
  EnvironmentName:
    Description: Unique name to distinguish different web application min chars 1 and max chars 4
    Type: String
    MinLength: 1
    MaxLength: 4

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'

  LatestWindowsAmiId:
    Description: Do Not modify the below default value
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
  
  ClientInstanceType:
    Description: The type of instance to connect to the environment
    Type: String
    Default: c4.xlarge
 
  fgwAmi:
    Type : 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/storagegateway/ami/FILE_S3/latest' 

Resources:
  # ECS Cluster
  StreamlitCluster:
    Type: AWS::ECS::Cluster
    DependsOn: StreamlitECSRoleCustomResource
    Properties:
      ClusterName: !Join ['-', ['StreamlitCluster', !Ref EnvironmentName]]
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # Logs Policy
  LogsPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      ManagedPolicyName: !Sub "LogsPolicy${EnvironmentName}"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:PutRetentionPolicy'
            Resource: '*'
  
  # Logging bucket
  LoggingBucket: 
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              AWS: !Sub 
                    - arn:aws:iam::${ElbAccount}:root
                    - {ElbAccount: !FindInMap [ELBRegionMap, !Ref 'AWS::Region', ELBAccountId]}
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/alb/logs/AWSLogs/${AWS::AccountId}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref Vpccidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'VPC'
  
  VPCLogGroup:
    DeletionPolicy: Retain
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 7
      
  VPCLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn
  
  VPCFlowLog:
    Type: "AWS::EC2::FlowLog"
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogGroupName: !Ref VPCLogGroup
      DeliverLogsPermissionArn: !GetAtt VPCLogRole.Arn
  
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create a Subnet
  PublicSubnetA:  
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 0
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetA

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 1
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnetB

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetAcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 0
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetBcidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
                          - 1
                          - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: PrivateSubnetB

  # NAT Gateway
  NatGatewayAEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayBEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
  
  # Public Route Table 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  # Private Route Table
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableA

  DefaultPrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTableB

  DefaultPrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  #Build VPC Endpoints
  SGInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.storagegateway'
      VpcId: !Ref VPC
      SecurityGroupIds:  
        - !Ref VPCEndpointSecurityGroup
      SubnetIds: 
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      
  # VPC Endpoint Security Group
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: VPC Endpoint Security Group
      GroupDescription: Group allowing traffic from the Storage Gateway Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref FileGatewaySecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref WindowsHostSecurityGroup
        - IpProtocol: tcp
          FromPort: '1026'
          ToPort: '1028'
          SourceSecurityGroupId: !Ref FileGatewaySecurityGroup
        - IpProtocol: tcp
          FromPort: '1031'
          ToPort: '1031'
          SourceSecurityGroupId: !Ref FileGatewaySecurityGroup
        - IpProtocol: tcp
          FromPort: '2222'
          ToPort: '2222'
          SourceSecurityGroupId: !Ref FileGatewaySecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: VPC Endpoint Security Group

  # Custom ECS resource
  StreamlitECSRoleCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['ECSCustomRole', !Sub '${AWS::StackName}']]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - !GetAtt LogsPolicy.PolicyArn  
      Policies:
        - PolicyName: IAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateServiceLinkedRole
                  - iam:AttachRolePolicy
                Resource:
                  - "*"

  StreamlitECSRoleCustomResourceFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join ['-', ['ECSCustomF', !Sub '${AWS::StackName}']]
      Handler: index.handler
      Role: !GetAtt StreamlitECSRoleCustomResourceRole.Arn
      Timeout: 300
      Runtime: python3.12
      Code:
        ZipFile: !Sub |
              import boto3
              from botocore.exceptions import ClientError
              import cfnresponse
              iam_client = boto3.client('iam')

              def handler(event, context):
                  
                  try:
                    request_type = event['RequestType']
                    print(request_type)

                    if request_type == 'Create':
                      desired_ecs_role_name = "AWSServiceRoleForECS"
                      desired_ecs_scaling_role_name = "AWSServiceRoleForApplicationAutoScaling_ECSService"

                      try:
                        iam_client.get_role(RoleName=desired_ecs_role_name)
                        ecs_role_exists = True
                      except ClientError as e:
                        if e.response['Error']['Code'] == 'NoSuchEntity':
                          ecs_role_exists = False
                        else:
                          ecs_role_exists = True
                      
                      try:
                        iam_client.get_role(RoleName=desired_ecs_scaling_role_name)
                        ecs_scaling_role_exists = True
                      except ClientError as e:
                        if e.response['Error']['Code'] == 'NoSuchEntity':
                          ecs_scaling_role_exists = False
                        else:
                          ecs_scaling_role_exists = True
                      
                      print(f"ECS service role exist? {ecs_role_exists}")
                      if not ecs_role_exists:
                        iam_client.create_service_linked_role(AWSServiceName="ecs.amazonaws.com")
                      
                      print(f"ECS scaling service role exist? {ecs_scaling_role_exists}")
                      if not ecs_scaling_role_exists:
                        iam_client.create_service_linked_role(AWSServiceName="ecs.application-autoscaling.amazonaws.com")
                        
                  except Exception as ex:
                    print(ex)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})
                  else:
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
  
  StreamlitECSRoleCustomResource:
    Type: Custom::ECSRole
    Properties:
      ServiceToken: !GetAtt StreamlitECSRoleCustomResourceFunction.Arn 

# Build Your Windows Host
  WindowsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Windows Host Security Group
      GroupDescription: Security Group for Windows Host
      # Despite this security group containing no ingress rules, Session Manager can still provide shell access
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      
      Tags:
        - Key: Name
          Value: Windows Host Security Group

  WindowsInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId:
        Ref: LatestWindowsAmiId
      InstanceType: !Ref ClientInstanceType
      SecurityGroupIds: 
        - !Ref WindowsHostSecurityGroup
      SubnetId: !Ref PrivateSubnetA
      KeyName: !Ref KeyName
      Tags:
        - 
          Key: Name
          Value: Windows RDP Host 
      UserData:
        Fn::Base64:
          !Sub |
          <powershell>

          # Disable IE Security (Windows)
          function Disable-ieESC {
              $AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
              $UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
              Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
              Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
              Stop-Process -Name Explorer
              Write-Host "IE Enhanced Security Configuration (ESC) has been disabled." -ForegroundColor Green
          }
          Disable-ieESC

          $SourceURL = "https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US"
          $Installer = $env:TEMP + "\firefox.exe"
          Invoke-WebRequest $SourceURL -OutFile $Installer
          Start-Process -FilePath $Installer -Args "/s" -Verb RunAs -Wait
          Remove-Item $Installer

          # download files
          Invoke-WebRequest https://docs.aws.amazon.com/pdfs/AmazonS3/latest/userguide/s3-userguide.pdf -OutFile c:\Users\Administrator\Desktop\s3-userguide.pdf
          Invoke-WebRequest https://docs.aws.amazon.com/pdfs/opensearch-service/latest/developerguide/opensearch-service-dg.pdf -OutFile c:\Users\Administrator\Desktop\opensearch-service-dg.pdf
          Invoke-WebRequest https://docs.aws.amazon.com/pdfs/bedrock/latest/userguide/bedrock-ug.pdf -OutFile c:\Users\Administrator\Desktop\bedrock-ug.pdf
           
          </powershell>
            
# Build Your File Gateway Host
  FileGatewaySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: File Gateway Security Group
      GroupDescription: Group allowing traffic from the Windows Host Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          SourceSecurityGroupId: !Ref WindowsHostSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref WindowsHostSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref WindowsHostSecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Storage Gateway Security Group          

  fileGatewayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'fileGatewayIamRole'
  fileGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
  
  fileGateway:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref fgwAmi
      InstanceType: c4.2xlarge
      IamInstanceProfile: !Ref 'fileGatewayInstanceProfile'
      Tags:
        - Key: Name
          Value: FileGateway
      InstanceInitiatedShutdownBehavior: stop
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: '80'
            DeleteOnTermination: 'true'
            VolumeType: gp2
        - DeviceName: /dev/xvdc
          Ebs:
            VolumeSize: '300'
            DeleteOnTermination: 'true'
            VolumeType: gp2
      SecurityGroupIds: 
        - !Ref FileGatewaySecurityGroup
      SubnetId: !Ref PrivateSubnetA

Outputs:
  VPC:
    Description: "VPC"
    Value: !Ref VPC
    Export:
      Name: Basic-VPC
  
  LogsPolicy:
    Description: "LogsPolicy"
    Value: !GetAtt LogsPolicy.PolicyArn
    Export:
      Name: Basic-LogsPolicy
  
  LoggingBucket:
    Description: "LoggingBucket"
    Value: !Ref LoggingBucket
    Export:
      Name: Basic-LoggingBucket
  
  LoggingBucketPolicy:
    Description: "LoggingBucketPolicy"
    Value: !Ref LoggingBucketPolicy
    Export:
      Name: Basic-LoggingBucketPolicy
  
  PublicSubnetA:
    Description: "PublicSubnetA"
    Value: !Ref PublicSubnetA
    Export:
      Name: Basic-PublicSubnetA

  PublicSubnetB:
    Description: "PublicSubnetB"
    Value: !Ref PublicSubnetB
    Export:
      Name: Basic-PublicSubnetB

  PrivateSubnetA:
    Description: "PrivateSubnetA"
    Value: !Ref PrivateSubnetA
    Export:
      Name: Basic-PrivateSubnetA

  PrivateSubnetB:
    Description: "PrivateSubnetB"
    Value: !Ref PrivateSubnetB
    Export:
      Name: Basic-PrivateSubnetB
  
  StreamlitCluster:
    Description: "StreamlitCluster"
    Value: !Ref StreamlitCluster
    Export:
      Name: StreamlitCluster

  fileGatewayPrivateIP:
    Description: File Gateway Private IP Address
    Value: !GetAtt fileGateway.PrivateIp
